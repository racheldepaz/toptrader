'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useSearchParams } from 'next/navigation';
import { useSupabaseAuth } from '@/hooks/useSupabaseAuth';
import { supabase } from '@/lib/supabase';
import { useAuthModal } from '@/context/AuthModalContext';
import MultiStepSignupModal from '@/components/auth/MultiStepSignupModal';
import EnhancedTradeCard from '@/components/EnhancedTradeCard';
import { Trade, convertDbTradeToUITrade } from '@/lib/types';
import { getTradesWithSocialStats } from '@/lib/api/social';

import type { Metadata } from 'next';


export const metadata: Metadata = {
  title: "Dashboard - TopTrader",
  description: "View today's top traders and recent trades",
};

// Define types for our stats
interface UserStats {
  total_trades: number;
  win_rate: number;
  avg_return: number;
  best_trade: number;
  worst_trade: number;
  trades_this_week: number;
  trades_this_month: number;
  total_likes_received: number;
  total_comments_received: number;
}

interface LeaderboardEntry {
  user_id: string;
  username: string;
  display_name: string;
  total_trades: number;
  avg_return?: number;
  win_rate?: number;
  winning_trades?: number;
  trades_this_week?: number;
}

// Helper function to detect if username looks like an email (Google OAuth auto-generated)
const isAutoGeneratedUsername = (username: string, userEmail?: string) => {
  if (!username || !userEmail) return false;
  
  // Check if username is exactly the email
  if (username === userEmail) return true;
  
  // Check if username looks like an email (contains @ and .)
  if (username.includes('@') && username.includes('.')) return true;
  
  // Check if username is the email part before @
  const emailPrefix = userEmail.split('@')[0];
  if (username === emailPrefix) return true;
  
  return false;
};

// Performance Component
const PerformanceWidget = () => {
  const { user } = useSupabaseAuth();
  const [stats, setStats] = useState<UserStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadPerformance = async () => {
      if (!user) {
        setLoading(false);
        return;
      }

      try {
        console.log('🔍 Loading performance for user:', user.id);
        
        const { data, error } = await supabase.rpc('get_user_performance', {
          target_user_id: user.id
        });

        console.log('📊 get_user_performance result:', { data, error });

        if (error) throw error;

        // The function should return a single row, but it might be wrapped in an array
        const statsData = Array.isArray(data) ? data[0] : data;
        
        console.log('📈 Processed stats data:', statsData);

        if (statsData) {
          setStats(statsData);
        } else {
          // No data returned - user has no stats yet
          setStats({
            total_trades: 0,
            win_rate: 0,
            avg_return: 0,
            best_trade: 0,
            worst_trade: 0,
            trades_this_week: 0,
            trades_this_month: 0,
            total_likes_received: 0,
            total_comments_received: 0
          });
        }
      } catch (err) {
        console.error('❌ Error loading performance:', err);
        setError('Failed to load performance');
      }
      setLoading(false);
    };

    loadPerformance();
  }, [user]);

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
        <h3 className="font-bold text-gray-900 mb-4">Your Performance</h3>
        <div className="animate-pulse space-y-3">
          <div className="h-4 bg-gray-200 rounded w-3/4"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2"></div>
          <div className="h-4 bg-gray-200 rounded w-2/3"></div>
        </div>
      </div>
    );
  }

  if (error || !user) {
    return (
      <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
        <h3 className="font-bold text-gray-900 mb-4">Your Performance</h3>
        <div className="text-sm text-gray-500">
          {!user ? 'Sign in to see your performance' : error || 'No trading data yet. Make your first trade!'}
        </div>
      </div>
    );
  }

  // Show empty state for new users with no stats
  if (!stats || stats.total_trades === 0) {
    return (
      <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
        <h3 className="font-bold text-gray-900 mb-4">Your Performance</h3>
        <div className="text-sm text-gray-500">
          No trading data yet. Make your first trade to see your performance!
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
      <h3 className="font-bold text-gray-900 mb-4">Your Performance</h3>
      
      <div className="space-y-3">
        {/* Win Rate */}
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-600">Win Rate</span>
          <span className={`text-sm font-medium ${
            (stats.win_rate || 0) >= 50 ? 'text-green-600' : 'text-red-600'
          }`}>
            {((stats.win_rate || 0)).toFixed(1)}%
          </span>
        </div>

        {/* Average Return */}
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-600">Avg Return</span>
          <span className={`text-sm font-medium ${
            (stats.avg_return || 0) >= 0 ? 'text-green-600' : 'text-red-600'
          }`}>
            {(stats.avg_return || 0) > 0 ? '+' : ''}{((stats.avg_return || 0)).toFixed(2)}%
          </span>
        </div>

        {/* Total Trades */}
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-600">Total Trades</span>
          <span className="text-sm font-medium text-gray-900">
            {stats.total_trades || 0}
          </span>
        </div>

        {/* Best Trade */}
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-600">Best Trade</span>
          <span className="text-sm font-medium text-green-600">
            +{((stats.best_trade || 0)).toFixed(2)}%
          </span>
        </div>

        {/* Worst Trade */}
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-600">Worst Trade</span>
          <span className="text-sm font-medium text-red-600">
            {((stats.worst_trade || 0)).toFixed(2)}%
          </span>
        </div>

        {/* Trades This Week */}
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-600">Trades This Week</span>
          <span className="text-sm font-medium text-gray-900">
            {stats.trades_this_week || 0}
          </span>
        </div>

        {/* Trades This Month */}
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-600">Trades This Month</span>
          <span className="text-sm font-medium text-gray-900">
            {stats.trades_this_month || 0}
          </span>
        </div>
      </div>
    </div>
  );
};

// Leaderboard Component
const LeaderboardWidget = () => {
  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);
  const [loading, setLoading] = useState(true);
  const [boardType, setBoardType] = useState('returns');
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadLeaderboard = async () => {
      setLoading(true);
      
      try {
        const { data, error } = await supabase.rpc('get_leaderboard', {
          board_type: boardType,
          limit_count: 5
        });

        if (error) throw error;
        setLeaderboard(data || []);
      } catch (err) {
        console.error('Error loading leaderboard:', err);
        setError('Failed to load leaderboard');
        setLeaderboard([]);
      }
      setLoading(false);
    };

    loadLeaderboard();
  }, [boardType]);

  const getBoardTitle = () => {
    switch (boardType) {
      case 'returns': return 'Best Returns';
      case 'volume': return 'Most Active';
      case 'winrate': return 'Best Win Rate';
      default: return 'Leaderboard';
    }
  };

  const renderLeaderboardItem = (trader: LeaderboardEntry, index: number) => {
    const isFirst = index === 0;
    const medal = index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : `${index + 1}.`;
    
    return (
      <div key={trader.username} className={`flex items-center justify-between p-2 rounded ${
        isFirst ? 'bg-yellow-50 border border-yellow-200' : ''
      }`}>
        <div className="flex items-center space-x-2">
          <span className="text-sm">{medal}</span>
          <div>
            <div className="text-sm font-medium text-gray-900">
              {trader.display_name}
            </div>
            <div className="text-xs text-gray-500">@{trader.username}</div>
          </div>
        </div>
        <div className="text-right">
          {boardType === 'returns' && trader.avg_return && (
            <div className="text-sm font-medium text-green-600">
              +{trader.avg_return}%
            </div>
          )}
          {boardType === 'volume' && (
            <div className="text-sm font-medium text-blue-600">
              {trader.total_trades} trades
            </div>
          )}
          {boardType === 'winrate' && trader.win_rate && (
            <div className="text-sm font-medium text-purple-600">
              {trader.win_rate}%
            </div>
          )}
          <div className="text-xs text-gray-500">
            {trader.total_trades} total
          </div>
        </div>
      </div>
    );
  };

  return (
    
    <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
      <div className="flex items-center justify-between mb-4">
        <h3 className="font-bold text-gray-900">{getBoardTitle()}</h3>
        <select
          value={boardType}
          onChange={(e) => setBoardType(e.target.value)}
          className="text-xs border border-gray-200 rounded px-2 py-1"
        >
          <option value="returns">Returns</option>
          <option value="volume">Volume</option>
          <option value="winrate">Win Rate</option>
        </select>
      </div>

      {loading ? (
        <div className="space-y-3">
          {[1, 2, 3].map(i => (
            <div key={i} className="animate-pulse flex items-center space-x-2">
              <div className="w-6 h-4 bg-gray-200 rounded"></div>
              <div className="flex-1 h-4 bg-gray-200 rounded"></div>
              <div className="w-12 h-4 bg-gray-200 rounded"></div>
            </div>
          ))}
        </div>
      ) : error ? (
        <div className="text-sm text-gray-500">{error}</div>
      ) : leaderboard.length === 0 ? (
        <div className="text-sm text-gray-500">No data yet</div>
      ) : (
        <div className="space-y-2">
          {leaderboard.map((trader, index) => renderLeaderboardItem(trader, index))}
        </div>
      )}
    </div>
  );
};

export default function EnhancedDashboard() {
  console.log('📊 EnhancedDashboard: Component rendered');
  
  const { user } = useSupabaseAuth();
  const searchParams = useSearchParams();
  const { 
    isSignupModalOpen, 
    openSignupModal, 
    closeSignupModal, 
    setSignupStep,
    signupStep 
  } = useAuthModal();

  const [trades, setTrades] = useState<Trade[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  console.log('📊 EnhancedDashboard: Current state:', {
    user: user ? { id: user.id, email: user.email } : null,
    searchParams: searchParams?.toString(),
    isSignupModalOpen,
    signupStep
  });

  // Critical Google Auth and Onboarding Flow Handler
  useEffect(() => {
    const handleSignupFlow = async () => {
      console.log('📊 EnhancedDashboard: Handling signup flow', { 
        user: user ? { id: user.id, email: user.email } : null, 
        searchParams: searchParams?.toString(),
        signupStep 
      });
  
      if (!user) {
        console.log('📊 EnhancedDashboard: No user, skipping signup flow');
        return;
      }
  
      const signupParam = searchParams?.get('signup');
      
      // Handle URL-based signup flow first (from email verification or explicit redirects)
      if (signupParam === 'verify' && signupStep === 'email') {
        console.log('📊 EnhancedDashboard: User just verified email, moving to password step');
        openSignupModal();
        setSignupStep('password');
        return;
      }
      
      if (signupParam === 'profile') {
        console.log('📊 EnhancedDashboard: User needs to complete profile setup (from URL)');
        openSignupModal();
        setSignupStep('profile');
        return;
      }
  
      // If no URL-based signup flow, check if user needs to complete profile
      // (This catches new Google OAuth users and incomplete profiles)
      if (!signupParam) {
        console.log('📊 EnhancedDashboard: No signup URL param, checking if user has completed profile');
        
        // First, let's log the user object in detail
        console.log('🔍 DEBUG: Full user object:', user);
        console.log('🔍 DEBUG: User email:', user?.email);
        console.log('🔍 DEBUG: User email type:', typeof user?.email);
        console.log('🔍 DEBUG: User metadata:', user?.user_metadata);
        console.log('🔍 DEBUG: User app metadata:', user?.app_metadata);
        console.log('🔍 DEBUG: User identities:', user?.identities);
        
        try {
          const { data: profile, error } = await supabase
            .from('users')
            .select('*') // Get ALL fields to see what's actually stored
            .eq('id', user.id)
            .single();
      
          console.log('📊 EnhancedDashboard: User profile check result:', { profile, error });
          
          // Detailed profile logging
          if (profile) {
            console.log('🔍 DEBUG: Profile exists!');
            console.log('🔍 DEBUG: Profile ID:', profile.id);
            console.log('🔍 DEBUG: Profile username:', profile.username);
            console.log('🔍 DEBUG: Profile username type:', typeof profile.username);
            console.log('🔍 DEBUG: Profile display_name:', profile.display_name);
            console.log('🔍 DEBUG: Profile display_name type:', typeof profile.display_name);
            console.log('🔍 DEBUG: Profile email:', profile.email);
            console.log('🔍 DEBUG: Profile created_at:', profile.created_at);
            console.log('🔍 DEBUG: Full profile object:', profile);
            
            // Let's check what Supabase might be auto-creating
            if (profile.username) {
              console.log('🔍 DEBUG: Username exists, checking if it looks auto-generated...');
              console.log('🔍 DEBUG: Username === user.email?', profile.username === user?.email);
              console.log('🔍 DEBUG: Username includes @?', profile.username.includes('@'));
              console.log('🔍 DEBUG: Username includes .?', profile.username.includes('.'));
              
              if (user?.email) {
                const emailPrefix = user.email.split('@')[0];
                console.log('🔍 DEBUG: Email prefix:', emailPrefix);
                console.log('🔍 DEBUG: Username === email prefix?', profile.username === emailPrefix);
              }
            }
            
            // Check if this looks like a Google OAuth auto-created profile
            const looksAutoGenerated = profile.username && (
              profile.username === user?.email || 
              profile.username.includes('@') ||
              (user?.email && profile.username === user.email.split('@')[0])
            );
            
            console.log('🔍 DEBUG: Profile looks auto-generated?', looksAutoGenerated);
            
            // Additional checks for Google OAuth patterns
            if (user?.identities && user.identities.length > 0) {
              console.log('🔍 DEBUG: User has identities:', user.identities);
              const googleIdentity = user.identities.find(id => id.provider === 'google');
              console.log('🔍 DEBUG: Google identity found?', !!googleIdentity);
              if (googleIdentity) {
                console.log('🔍 DEBUG: Google identity data:', googleIdentity);
              }
            }
          }
      
          if (error && error.code === 'PGRST116') {
            // No profile found - this is a new user (likely from Google OAuth)
            console.log('📊 EnhancedDashboard: No profile found, opening signup modal for profile step');
            console.log('🔍 DEBUG: This appears to be a completely new user with no profile');
            openSignupModal();
            setSignupStep('profile');
            
            // Update URL to indicate profile step for consistency
            if (typeof window !== 'undefined') {
              const url = new URL(window.location.href);
              url.searchParams.set('signup', 'profile');
              window.history.replaceState({}, '', url.toString());
            }
          } else if (profile && !profile.username) {
            // Profile exists but no username
            console.log('📊 EnhancedDashboard: Profile exists but no username, opening signup modal for profile step');
            console.log('🔍 DEBUG: Profile has no username field');
            openSignupModal();
            setSignupStep('profile');
            
            // Update URL to indicate profile step for consistency
            if (typeof window !== 'undefined') {
              const url = new URL(window.location.href);
              url.searchParams.set('signup', 'profile');
              window.history.replaceState({}, '', url.toString());
            }
          } else if (profile && profile.username && (
            profile.username === user?.email || 
            profile.username.includes('@') ||
            (user?.email && profile.username === user.email.split('@')[0])
          )) {
            // Profile has username but it looks auto-generated from Google OAuth
            console.log('📊 EnhancedDashboard: Profile has auto-generated username, opening signup modal for profile step');
            console.log('🔍 DEBUG: Username appears to be auto-generated from Google OAuth');
            console.log('🔍 DEBUG: Triggering profile completion flow');
            openSignupModal();
            setSignupStep('profile');
            
            // Update URL to indicate profile step for consistency
            if (typeof window !== 'undefined') {
              const url = new URL(window.location.href);
              url.searchParams.set('signup', 'profile');
              window.history.replaceState({}, '', url.toString());
            }
          } else if (profile && profile.username) {
            console.log('📊 EnhancedDashboard: User profile complete');
            console.log('🔍 DEBUG: Profile appears to be properly completed by user');
            console.log('🔍 DEBUG: Username:', profile.username);
            console.log('🔍 DEBUG: Display name:', profile.display_name);
          } else {
            console.log('📊 EnhancedDashboard: Unexpected profile state');
            console.log('🔍 DEBUG: This is an unexpected state, logging for investigation');
            console.log('🔍 DEBUG: Profile:', profile);
            console.log('🔍 DEBUG: Error:', error);
          }
        } catch (err) {
          console.log('📊 EnhancedDashboard: Error checking profile:', err);
          console.log('🔍 DEBUG: Exception details:', err);
        }
      }
      
      else {
        console.log('📊 EnhancedDashboard: Not interfering with signup flow. Current step:', signupStep);
      }
    };
  
    handleSignupFlow();
  }, [searchParams, user, openSignupModal, setSignupStep, signupStep]);

  const loadTrades = useCallback(async () => {
    setLoading(true);
    setError(null);

    try {
      const result = await getTradesWithSocialStats();
      
      if (result.success) {
        const convertedTrades = result.trades.map(convertDbTradeToUITrade);
        setTrades(convertedTrades);
      } else {
        console.error('Failed to load trades:', result.error);
        setError(result.error || 'Failed to load trades');
        setTrades([]);
      }
    } catch (err) {
      console.error('Unexpected error loading trades:', err);
      setError('Unexpected error occurred');
      setTrades([]);
    }

    setLoading(false);
  }, []);

  useEffect(() => {
    loadTrades();
  }, [loadTrades]);

  const handleTradeUpdate = (updatedTrade: Trade) => {
    setTrades(prevTrades => 
      prevTrades.map(trade => 
        trade.id === updatedTrade.id ? updatedTrade : trade
      )
    );
  };

  const handleRefresh = () => {
    loadTrades();
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Main Content Area */}
      <div className="max-w-6xl mx-auto px-4 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          
          {/* Sidebar - Takes 1 column */}
          <div className="lg:col-span-1">
            <div className="space-y-6">
              {/* Your Performance */}
              <PerformanceWidget />
              
              {/* Quick Leaderboard */}
              <LeaderboardWidget />
            </div>
          </div>

          {/* Main Feed - Takes 3 columns */}
          <div className="lg:col-span-3">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-bold text-gray-900">Gains Wall</h2>
              <div className="flex items-center space-x-4">
                {error && (
                  <span className="text-sm text-red-600">
                    Error: {error}
                  </span>
                )}
                <button
                  onClick={handleRefresh}
                  disabled={loading}
                  className="px-4 py-2 text-sm font-medium text-blue-600 border border-blue-600 rounded-md hover:bg-blue-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {loading ? 'Loading...' : 'Refresh'}
                </button>
              </div>
            </div>

            {/* Loading State */}
            {loading && (
              <div className="flex items-center justify-center py-12">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                <span className="ml-3 text-gray-600">Loading trades...</span>
              </div>
            )}

            {/* Error State */}
            {error && !loading && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-red-800">
                      Error Loading Trades
                    </h3>
                    <div className="mt-2 text-sm text-red-700">
                      <p>{error}</p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Trades Feed - FIXED */}
{!loading && (
  <div className="space-y-4">
    {trades.length > 0 ? (
      trades.map(trade => (
        <div key={trade.id} className="p-6">
          <EnhancedTradeCard 
            trade={trade} 
            onTradeUpdate={handleTradeUpdate}
            isDetailed={false} // Show viral share + view details
          />
        </div>
      ))
    ) : (
      <div className="text-center py-12">
        <div className="text-gray-500 mb-4">
          <svg className="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-6m-4 0h-6m-4 0H4" />
          </svg>
        </div>
        <h3 className="text-lg font-medium text-gray-900 mb-2">No trades yet</h3>
        <p className="text-gray-500">
          No trades found. Start trading to see your feed!
        </p>
      </div>
    )}
  </div>
)}
          </div>
        </div>
      </div>

      {/* Signup Modal for continuing the flow */}
      <MultiStepSignupModal 
        isOpen={isSignupModalOpen} 
        onClose={closeSignupModal} 
      />
    </div>
  );
}